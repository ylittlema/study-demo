<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!--启用注解-->
    <context:annotation-config/>
    <!-- 使 AspectJ 的注解起作用 -->
    <!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
    <!--Spring扫描包路径-->
    <context:component-scan base-package="com.yjn.springdemo"/>
    <!--<bean id="person" class="com.yjn.springdemo.model.Person"/>-->
    <!--读取 properties 配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 配置数据源 资源库 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClassName}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="jdbcUrl" value="${url}"/>
    </bean>
    <!--
        2. mybatis 的 SqlSession 的工厂: SqlSessionFactoryBean
        dataSource / typeAliasesPackage
     -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.yjn.springdemo.model"/>
    </bean>
    <!--
        3. mybatis 自动扫描加载 Sql 映射文件 : MapperScannerConfigurer
        sqlSessionFactory / basePackage
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yjn.springdemo.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置 Spring 的声明式事务 -->
    <!-- 4. 事务管理 : DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 5. 配置事务属性, 需要事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="purchase" propagation="REQUIRES_NEW"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 6. 使用注解式事务 ;
    <tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!-- 7. 配置事务切点, 并把切点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.yjn.springdemo.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

</beans>